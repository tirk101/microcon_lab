/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BUFFER_SIZE 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t recieveBuffer[BUFFER_SIZE];
char transmitBuffer[BUFFER_SIZE];
uint16_t recieveBufferIndex = 0;
uint16_t transmitBufferIndex = 0;
char recieveChar;
char myname[100];
char yourname[100];
int isSender = 0,isIntro = 1,isEnd = 0,isSentName = 0,isSentMessage = 0;
char nextLine[] = "\n\r\t";
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	char intro[] = "Man from U.A.R.T.2 ! \n\rQuit PRESS q\n\r\t";

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &recieveChar, 1);
  HAL_UART_Transmit(&huart3, (uint8_t*) intro, strlen(intro),1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(isSender == 1 && isIntro == 1 && isSentName == 0){
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
		  HAL_UART_Transmit(&huart3, (uint8_t*) "Name:", strlen("Name:"),1000);
		  isSentName = 1;
	  }

	  if(isSender == 1 && isIntro == 0 && isSentMessage == 0){
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
		  HAL_UART_Transmit(&huart3, (uint8_t*) myname, strlen(myname),1000);
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
		  HAL_UART_Transmit(&huart3, (uint8_t*) " => ", strlen(" => "),1000);
		  isSentMessage = 1;
	  }

	  if(isSender == 0 && isIntro == 1){
		  while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_RXNE)==RESET){}
		  HAL_UART_Receive(&huart6,(uint8_t*) recieveBuffer, BUFFER_SIZE,1000);
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
		  HAL_UART_Transmit(&huart3, (uint8_t*) recieveBuffer, BUFFER_SIZE,1000);
		  memset(recieveBuffer,0,BUFFER_SIZE);
		  isSender = 1;

	  }

	  if(isSender == 0 && isIntro == 0){
		  while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_RXNE)==RESET){}
		  HAL_UART_Receive(&huart6,(uint8_t*) &recieveBuffer, BUFFER_SIZE,1000);
		  if(recieveBuffer[0] == 'q' && strlen(recieveBuffer) == 1){
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
			  HAL_UART_Transmit(&huart3, (uint8_t*) "U.A.R.T.1 is quit.", strlen("U.A.R.T.1 is quit."),1000);
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
			  HAL_UART_Transmit(&huart3, (uint8_t*) "\n\r\tProgram Exit...", strlen("Program Exit..."),1000);
			  isEnd = 1;
			  isSender = 2;
			  isIntro = 2;
		  }
		  else{
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
			  HAL_UART_Transmit(&huart3, (uint8_t*) recieveBuffer, BUFFER_SIZE,1000);
			  memset(recieveBuffer,0,BUFFER_SIZE);
			  isSender = 1;
		  }
	  }
	  HAL_Delay(1000);
  /* USER CODE END 3 */
  }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart == &huart3) {
    	if(isEnd == 0){
			HAL_UART_Receive_IT(&huart3, (uint8_t*) &recieveChar, 1);
    	}
    	//ช่วงส่งชื่อ
    	if(isSender == 1 && isIntro == 1){
    		HAL_UART_Transmit(&huart3,(uint8_t*)&recieveChar,1,1000);
    		if(recieveChar == 13){
    			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
    			HAL_UART_Transmit(&huart3,(uint8_t*)&nextLine,strlen(nextLine),1000);
    			strcpy(myname,transmitBuffer);
    			strcat(transmitBuffer," is ready.\n\r\t");
    			while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
    			HAL_UART_Transmit(&huart6,(uint8_t*)transmitBuffer,BUFFER_SIZE,1000);
//    			while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
//    			HAL_UART_Transmit(&huart6,(uint8_t*) " is ready.\n\r\t",strlen(" is ready.\n\r\t"),1000);
    			isSender = 0;
    			isIntro = 0;
    			memset(transmitBuffer,0,BUFFER_SIZE);
    			transmitBufferIndex = 0;
    		}
    		else{
    			transmitBuffer[transmitBufferIndex++]=recieveChar;
			}
        }
    	//ช่วงส่งข้อความ
    	else if(isSender == 1 && isIntro == 0){
    		HAL_UART_Transmit(&huart3,(uint8_t*)&recieveChar,1,1000);
			if(recieveChar == 13){
				while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
				HAL_UART_Transmit(&huart3,(uint8_t*)&nextLine,strlen(nextLine),1000);

				if(transmitBuffer[0] == 'q' && strlen(transmitBuffer) == 1){
					while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
					HAL_UART_Transmit(&huart6,(uint8_t*) "q",1,1000);
					while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
					HAL_UART_Transmit(&huart3, (uint8_t*) "Program Exit...", strlen("Program Exit..."),1000);
					isEnd = 1;
					isSender = 2;
					isIntro = 2;
				}
				else{
//					char temp[100];
//					strcpy(temp,myname);
//					strcat(temp," : ");
//					strcat(temp,transmitBuffer);
//					strcat(temp,nextLine);
//					memset(transmitBuffer,0,BUFFER_SIZE);
//					strcpy(transmitBuffer,temp);
					while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
					HAL_UART_Transmit(&huart6,(uint8_t*)&myname,strlen(myname),1000);
					while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
					HAL_UART_Transmit(&huart6,(uint8_t*)" : ",strlen(" : "),1000);
					while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
					HAL_UART_Transmit(&huart6,(uint8_t*)transmitBuffer,strlen(transmitBuffer),1000);
					while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
					HAL_UART_Transmit(&huart6,(uint8_t*)nextLine,strlen(nextLine),1000);
					isSender = 0;
					isSentMessage = 0;
					memset(transmitBuffer,0,BUFFER_SIZE);
					transmitBufferIndex = 0;
				}
			}
			else{
				transmitBuffer[transmitBufferIndex++]=recieveChar;
			}

    	}
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
